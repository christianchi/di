package com.dam.di.contextualactionmode;

import java.util.List;

import android.app.Activity;
import android.view.ActionMode;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.Toast;

public class UsuarioArrayAdapter extends ArrayAdapter<Usuario> {

	  private final List<Usuario> list;
	  private final Activity context;
	  ActionMode mActionMode;


	  public UsuarioArrayAdapter(Activity context, List<Usuario> list) {
	    super(context, R.layout.user_list_item, list);
	    this.context = context;
	    this.list = list;
	  }

	  static class VistaUsuario {
	    protected CheckBox checkbox;
	  }
	  
	  private ActionMode.Callback mActionModeCallback = new ActionMode.Callback() {

			// Called when the action mode is created; startActionMode() was called
			@Override
			public boolean onCreateActionMode(ActionMode mode, Menu menu) {
				// Inflate a menu resource providing context menu items
				MenuInflater inflater = mode.getMenuInflater();
				inflater.inflate(R.menu.action_mode_context_menu, menu);
				return true;
			}

			// Called each time the action mode is shown. Always called after
			// onCreateActionMode, but
			// may be called multiple times if the mode is invalidated.
			@Override
			public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
				return false; // Return false if nothing is done
			}

			// Called when the user selects a contextual menu item
			@Override
			public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
				switch (item.getItemId()) {
				case R.id.item_delete:

					eliminar(selectedItem);

					mode.finish(); // Action picked, so close the CAB
					return true;
				default:
					return false;
				}
			}

			// Called when the user exits the action mode
			@Override
			public void onDestroyActionMode(ActionMode mode) {
				mActionMode = null;
				selectedItem = -1;
			}

			private void eliminar(int selectedItem) {
				listaUsuario.remove(selectedItem);
				adapter.notifyDataSetChanged();
			}

		};

	  @Override
	  public View getView(int position, View convertView, ViewGroup parent) {
	    View view = null;
	    if (convertView == null) {
	      LayoutInflater inflator = context.getLayoutInflater();
	      view = inflator.inflate(R.layout.user_list_item, null);
	      final VistaUsuario vistaUsuario = new VistaUsuario();
	      vistaUsuario.checkbox = (CheckBox) view.findViewById(R.id.checkUsuario);
	      vistaUsuario.checkbox
	          .setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {

	            @Override
	            public void onCheckedChanged(CompoundButton buttonView,
	                boolean isChecked) {
	              Usuario element = (Usuario) vistaUsuario.checkbox
	                  .getTag();
	              element.setSeleccionado(buttonView.isChecked());

	            }
	          });
	      view.setTag(vistaUsuario);
	      vistaUsuario.checkbox.setTag(list.get(position));
	    } else {
	      view = convertView;
	      ((VistaUsuario) view.getTag()).checkbox.setTag(list.get(position));
	    }
	    VistaUsuario holder = (VistaUsuario) view.getTag();
	    holder.checkbox.setText(list.get(position).getNombre());
	    holder.checkbox.setChecked(list.get(position).isSeleccionado());
	    return view;
	  }
	} 