package com.dam.di.contextualactionmode;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import android.app.ListActivity;
import android.os.Bundle;
import android.view.ActionMode;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.ListView;
import android.widget.Toast;

public class MainActivity extends ListActivity {

	ActionMode mActionMode;
	UsuarioArrayAdapter adapter;
	ListView lista;
	List<Usuario> listaUsuario;
	public int selectedItem = -1, contadorCheck = 0;

	/** Called when the activity is first created. */

	public void onCreate(Bundle icicle) {
		super.onCreate(icicle);
		// create an array of Strings, that will be put to our ListActivity
		ArrayAdapter<Usuario> adapter = new UsuarioArrayAdapter(this,
				getModel());
		setListAdapter(adapter);
	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		String titulo = "";
		
		if (listaUsuario.get(position).isSeleccionado()) {
			// Incremento el contador de checkboxes
			contadorCheck++;

			// Compruebo si el actionMode se ha instanciado ya
			if (mActionMode == null) {
				mActionMode = MainActivity.this
						.startActionMode(mActionModeCallback);
			}

			if (contadorCheck == 1) {
				titulo = contadorCheck + " seleccionado";
			} else {
				titulo = contadorCheck + " seleccionados";
			}
			mActionMode.setTitle(titulo);
		} else {
			contadorCheck--;
			if (contadorCheck == 0) {
				// finalizo el actionMode = que el actionBar vuelva a su estado
				// original
				mActionMode.finish();
			} else {
				if (contadorCheck == 1) {
					titulo = contadorCheck + " seleccionado";
				} else {
					titulo = contadorCheck + " seleccionados";
				}
				mActionMode.setTitle(titulo);
			}
		}

	}

	private List<Usuario> getModel() {
		listaUsuario = new ArrayList<Usuario>();
		listaUsuario.add(new Usuario("Miguel"));
		listaUsuario.add(new Usuario("Rebeca"));
		listaUsuario.add(new Usuario("Rebeca Campos"));
		listaUsuario.add(new Usuario("Olivia"));
		listaUsuario.add(new Usuario("Miriam"));

		listaUsuario.get(1).setSeleccionado(true);
		return listaUsuario;
	}

	private Usuario get(String s) {
		return new Usuario(s);
	}

	private ActionMode.Callback mActionModeCallback = new ActionMode.Callback() {

		// Called when the action mode is created; startActionMode() was called
		@Override
		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
			// Inflate a menu resource providing context menu items
			MenuInflater inflater = mode.getMenuInflater();
			inflater.inflate(R.menu.action_mode_context_menu, menu);
			return true;
		}

		// Called each time the action mode is shown. Always called after
		// onCreateActionMode, but
		// may be called multiple times if the mode is invalidated.
		@Override
		public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
			return false; // Return false if nothing is done
		}

		// Called when the user selects a contextual menu item
		@Override
		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
			switch (item.getItemId()) {
			case R.id.item_delete:
				Toast.makeText(getApplicationContext(), "Eliminado",
						Toast.LENGTH_LONG).show();
				eliminarTodos();

				mode.finish(); // Action picked, so close the CAB
				return true;
			default:
				return false;
			}
		}

		// Called when the user exits the action mode
		@Override
		public void onDestroyActionMode(ActionMode mode) {
			mActionMode = null;
			selectedItem = -1;
		}

		private void eliminarTodos() {
			Iterator<Usuario> it = listaUsuario.iterator();
			while (it.hasNext()) {
				Usuario actual = (Usuario) it.next();
				if (actual.isSeleccionado())
					listaUsuario.remove(selectedItem);
			}

			adapter.notifyDataSetChanged();
		}

	};

}
